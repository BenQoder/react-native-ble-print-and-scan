///
/// HybridBlePrintAndScanSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.bleprintandscan

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the BlePrintAndScan HybridObject.
 * Implement this abstract class to create Kotlin-based instances of BlePrintAndScan.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridBlePrintAndScanSpec: HybridObject() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  

  // Methods
  @DoNotStrip
  @Keep
  abstract fun sum(num1: Double, num2: Double): Double
  
  @DoNotStrip
  @Keep
  abstract fun initializeBluetooth(): Promise<Unit>
  
  abstract fun startScanningForBluetoothDevices(onDeviceFound: (devices: Array<Device>) -> Unit): Promise<Unit>
  
  @DoNotStrip
  @Keep
  private fun startScanningForBluetoothDevices_cxx(onDeviceFound: Func_void_std__vector_Device_): Promise<Unit> {
    val __result = startScanningForBluetoothDevices(onDeviceFound)
    return __result
  }
  
  @DoNotStrip
  @Keep
  abstract fun suspendScanForBluetoothDevices(): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun connectToBluetoothDevice(deviceId: String): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun disconnectFromBluetoothDevice(): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun generateBytecode(value: String, printerWidth: Double, mtuSize: Double): Promise<Array<ArrayBuffer>>
  
  @DoNotStrip
  @Keep
  abstract fun generateBytecodeBase64(value: String, printerWidth: Double, mtuSize: Double): Promise<Array<String>>
  
  @DoNotStrip
  @Keep
  abstract fun sendToBluetoothThermalPrinter(value: String, printerWidth: Double): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun sendToUsbThermalPrinter(value: String, printerWidth: Double, chunkSize: Double): Promise<Unit>

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridBlePrintAndScanSpec"
  }
}
