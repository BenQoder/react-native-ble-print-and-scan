///
/// HybridBleScannerSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.bleprintandscan

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the BleScanner HybridObject.
 * Implement this abstract class to create Kotlin-based instances of BleScanner.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridBleScannerSpec: HybridObject() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  

  // Methods
  @DoNotStrip
  @Keep
  abstract fun initializeScanner(): Promise<Unit>
  
  abstract fun startScanningForScanners(onScannerFound: (devices: Array<Device>) -> Unit): Promise<Unit>
  
  @DoNotStrip
  @Keep
  private fun startScanningForScanners_cxx(onScannerFound: Func_void_std__vector_Device_): Promise<Unit> {
    val __result = startScanningForScanners(onScannerFound)
    return __result
  }
  
  @DoNotStrip
  @Keep
  abstract fun suspendScanForScanners(): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun connectToScanner(deviceId: String): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun disconnectFromScanner(deviceId: String): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun isScannerConnected(deviceId: String): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun getConnectedScanners(): Promise<Array<Device>>
  
  @DoNotStrip
  @Keep
  abstract fun disconnectAllScanners(): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun getScannerInfo(deviceId: String): Promise<ScannerInfo>
  
  @DoNotStrip
  @Keep
  abstract fun getScannerSettings(deviceId: String): Promise<ScannerCurrentSettings>
  
  abstract fun startListening(deviceId: String, onScanResult: (result: ScanResult) -> Unit): Promise<Unit>
  
  @DoNotStrip
  @Keep
  private fun startListening_cxx(deviceId: String, onScanResult: Func_void_ScanResult): Promise<Unit> {
    val __result = startListening(deviceId, onScanResult)
    return __result
  }
  
  @DoNotStrip
  @Keep
  abstract fun stopListening(deviceId: String): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun triggerScan(deviceId: String, duration: ScannerTrigger): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun setScannerMode(deviceId: String, mode: ScannerMode): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun setBeepSettings(deviceId: String, settings: BeepSettings): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun setPowerSettings(deviceId: String, settings: PowerSettings): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun setDataFormatSettings(deviceId: String, settings: DataFormatSettings): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun setTimestamp(deviceId: String, format: TimestampFormat, datetime: String?): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun restoreFactorySettings(deviceId: String): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun customBeep(deviceId: String, level: Double): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun customBeepTime(deviceId: String, timeMs: Double, type: Double, frequencyHz: Double): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun powerOff(deviceId: String): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun getStoredDataCount(deviceId: String): Promise<Double>
  
  @DoNotStrip
  @Keep
  abstract fun uploadStoredData(deviceId: String, clearAfterUpload: Boolean): Promise<Array<ScanResult>>
  
  @DoNotStrip
  @Keep
  abstract fun clearStoredData(deviceId: String): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun sendRawCommand(deviceId: String, command: String): Promise<String>

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridBleScannerSpec"
  }
}
