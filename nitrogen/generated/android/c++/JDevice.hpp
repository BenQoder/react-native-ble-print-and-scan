///
/// JDevice.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "Device.hpp"

#include <string>

namespace margelo::nitro::bleprintandscan {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "Device" and the the Kotlin data class "Device".
   */
  struct JDevice final: public jni::JavaClass<JDevice> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/bleprintandscan/Device;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct Device by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    Device toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldId = clazz->getField<jni::JString>("id");
      jni::local_ref<jni::JString> id = this->getFieldValue(fieldId);
      static const auto fieldName = clazz->getField<jni::JString>("name");
      jni::local_ref<jni::JString> name = this->getFieldValue(fieldName);
      return Device(
        id->toStdString(),
        name->toStdString()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JDevice::javaobject> fromCpp(const Device& value) {
      return newInstance(
        jni::make_jstring(value.id),
        jni::make_jstring(value.name)
      );
    }
  };

} // namespace margelo::nitro::bleprintandscan
