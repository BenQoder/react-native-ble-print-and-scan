///
/// JHybridBlePrintAndScanSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridBlePrintAndScanSpec.hpp"

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `Device` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct Device; }

#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include <NitroModules/ArrayBuffer.hpp>
#include <vector>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <string>
#include "Device.hpp"
#include <functional>
#include "JFunc_void_std__vector_Device_.hpp"
#include "JDevice.hpp"

namespace margelo::nitro::bleprintandscan {

  jni::local_ref<JHybridBlePrintAndScanSpec::jhybriddata> JHybridBlePrintAndScanSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridBlePrintAndScanSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridBlePrintAndScanSpec::initHybrid),
    });
  }

  size_t JHybridBlePrintAndScanSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridBlePrintAndScanSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  double JHybridBlePrintAndScanSpec::sum(double num1, double num2) {
    static const auto method = javaClassStatic()->getMethod<double(double /* num1 */, double /* num2 */)>("sum");
    auto __result = method(_javaPart, num1, num2);
    return __result;
  }
  std::shared_ptr<Promise<void>> JHybridBlePrintAndScanSpec::initializeBluetooth() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("initializeBluetooth");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBlePrintAndScanSpec::startScanningForBluetoothDevices(const std::function<void(const std::vector<Device>& /* devices */)>& onDeviceFound) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JFunc_void_std__vector_Device_::javaobject> /* onDeviceFound */)>("startScanningForBluetoothDevices_cxx");
    auto __result = method(_javaPart, JFunc_void_std__vector_Device__cxx::fromCpp(onDeviceFound));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBlePrintAndScanSpec::suspendScanForBluetoothDevices() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("suspendScanForBluetoothDevices");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBlePrintAndScanSpec::connectToBluetoothDevice(const std::string& deviceId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */)>("connectToBluetoothDevice");
    auto __result = method(_javaPart, jni::make_jstring(deviceId));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBlePrintAndScanSpec::disconnectFromBluetoothDevice() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("disconnectFromBluetoothDevice");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::vector<std::shared_ptr<ArrayBuffer>>>> JHybridBlePrintAndScanSpec::generateBytecode(const std::string& value, double printerWidth, double mtuSize) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* value */, double /* printerWidth */, double /* mtuSize */)>("generateBytecode");
    auto __result = method(_javaPart, jni::make_jstring(value), printerWidth, mtuSize);
    return [&]() {
      auto __promise = Promise<std::vector<std::shared_ptr<ArrayBuffer>>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JArrayBuffer::javaobject>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<std::shared_ptr<ArrayBuffer>> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->cthis()->getArrayBuffer());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::vector<std::string>>> JHybridBlePrintAndScanSpec::generateBytecodeBase64(const std::string& value, double printerWidth, double mtuSize) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* value */, double /* printerWidth */, double /* mtuSize */)>("generateBytecodeBase64");
    auto __result = method(_javaPart, jni::make_jstring(value), printerWidth, mtuSize);
    return [&]() {
      auto __promise = Promise<std::vector<std::string>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<jni::JString>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<std::string> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toStdString());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBlePrintAndScanSpec::sendToBluetoothThermalPrinter(const std::string& value, double printerWidth) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* value */, double /* printerWidth */)>("sendToBluetoothThermalPrinter");
    auto __result = method(_javaPart, jni::make_jstring(value), printerWidth);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBlePrintAndScanSpec::sendToUsbThermalPrinter(const std::string& value, double printerWidth, double chunkSize) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* value */, double /* printerWidth */, double /* chunkSize */)>("sendToUsbThermalPrinter");
    auto __result = method(_javaPart, jni::make_jstring(value), printerWidth, chunkSize);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::bleprintandscan
