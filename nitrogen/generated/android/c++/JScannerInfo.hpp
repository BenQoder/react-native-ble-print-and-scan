///
/// JScannerInfo.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "ScannerInfo.hpp"

#include <optional>
#include <string>

namespace margelo::nitro::bleprintandscan {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "ScannerInfo" and the the Kotlin data class "ScannerInfo".
   */
  struct JScannerInfo final: public jni::JavaClass<JScannerInfo> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/bleprintandscan/ScannerInfo;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct ScannerInfo by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    ScannerInfo toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldFirmwareVersion = clazz->getField<jni::JString>("firmwareVersion");
      jni::local_ref<jni::JString> firmwareVersion = this->getFieldValue(fieldFirmwareVersion);
      static const auto fieldModuleType = clazz->getField<jni::JString>("moduleType");
      jni::local_ref<jni::JString> moduleType = this->getFieldValue(fieldModuleType);
      static const auto fieldBatteryLevel = clazz->getField<jni::JDouble>("batteryLevel");
      jni::local_ref<jni::JDouble> batteryLevel = this->getFieldValue(fieldBatteryLevel);
      static const auto fieldIsConnected = clazz->getField<jboolean>("isConnected");
      jboolean isConnected = this->getFieldValue(fieldIsConnected);
      return ScannerInfo(
        firmwareVersion->toStdString(),
        moduleType->toStdString(),
        batteryLevel != nullptr ? std::make_optional(batteryLevel->value()) : std::nullopt,
        static_cast<bool>(isConnected)
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JScannerInfo::javaobject> fromCpp(const ScannerInfo& value) {
      return newInstance(
        jni::make_jstring(value.firmwareVersion),
        jni::make_jstring(value.moduleType),
        value.batteryLevel.has_value() ? jni::JDouble::valueOf(value.batteryLevel.value()) : nullptr,
        value.isConnected
      );
    }
  };

} // namespace margelo::nitro::bleprintandscan
