///
/// JTimestampFormat.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "TimestampFormat.hpp"

namespace margelo::nitro::bleprintandscan {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "TimestampFormat" and the the Kotlin enum "TimestampFormat".
   */
  struct JTimestampFormat final: public jni::JavaClass<JTimestampFormat> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/bleprintandscan/TimestampFormat;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum TimestampFormat.
     */
    [[maybe_unused]]
    [[nodiscard]]
    TimestampFormat toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("_ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<TimestampFormat>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JTimestampFormat> fromCpp(TimestampFormat value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldDISABLED = clazz->getStaticField<JTimestampFormat>("DISABLED");
      static const auto fieldDATE_TIME = clazz->getStaticField<JTimestampFormat>("DATE_TIME");
      static const auto fieldUNIX_TIMESTAMP = clazz->getStaticField<JTimestampFormat>("UNIX_TIMESTAMP");
      
      switch (value) {
        case TimestampFormat::DISABLED:
          return clazz->getStaticFieldValue(fieldDISABLED);
        case TimestampFormat::DATE_TIME:
          return clazz->getStaticFieldValue(fieldDATE_TIME);
        case TimestampFormat::UNIX_TIMESTAMP:
          return clazz->getStaticFieldValue(fieldUNIX_TIMESTAMP);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::bleprintandscan
