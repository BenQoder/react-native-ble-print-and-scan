///
/// HybridBlePrintAndScanSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridBlePrintAndScanSpec.hpp"




namespace margelo::nitro::bleprintandscan {

  using namespace facebook;

  class JHybridBlePrintAndScanSpec: public jni::HybridClass<JHybridBlePrintAndScanSpec, JHybridObject>,
                                    public virtual HybridBlePrintAndScanSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/bleprintandscan/HybridBlePrintAndScanSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridBlePrintAndScanSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridBlePrintAndScanSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridBlePrintAndScanSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;

  public:
    inline const jni::global_ref<JHybridBlePrintAndScanSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    double sum(double num1, double num2) override;
    std::shared_ptr<Promise<void>> initializeBluetooth() override;
    std::shared_ptr<Promise<void>> startScanningForBluetoothDevices(const std::function<void(const std::vector<Device>& /* devices */)>& onDeviceFound) override;
    std::shared_ptr<Promise<void>> suspendScanForBluetoothDevices() override;
    std::shared_ptr<Promise<void>> connectToBluetoothDevice(const std::string& deviceId) override;
    std::shared_ptr<Promise<void>> disconnectFromBluetoothDevice() override;
    std::shared_ptr<Promise<std::vector<std::shared_ptr<ArrayBuffer>>>> generateBytecode(const std::string& value, double printerWidth, double mtuSize) override;
    std::shared_ptr<Promise<std::vector<std::string>>> generateBytecodeBase64(const std::string& value, double printerWidth, double mtuSize) override;
    std::shared_ptr<Promise<void>> sendToBluetoothThermalPrinter(const std::string& value, double printerWidth) override;
    std::shared_ptr<Promise<void>> sendToUsbThermalPrinter(const std::string& value, double printerWidth, double chunkSize) override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridBlePrintAndScanSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::bleprintandscan
