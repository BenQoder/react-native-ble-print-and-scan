///
/// JBeepSettings.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "BeepSettings.hpp"

#include "BeepTone.hpp"
#include "BeepVolume.hpp"
#include "JBeepTone.hpp"
#include "JBeepVolume.hpp"
#include <optional>

namespace margelo::nitro::bleprintandscan {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "BeepSettings" and the the Kotlin data class "BeepSettings".
   */
  struct JBeepSettings final: public jni::JavaClass<JBeepSettings> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/bleprintandscan/BeepSettings;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct BeepSettings by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    BeepSettings toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldVolume = clazz->getField<JBeepVolume>("volume");
      jni::local_ref<JBeepVolume> volume = this->getFieldValue(fieldVolume);
      static const auto fieldTone = clazz->getField<JBeepTone>("tone");
      jni::local_ref<JBeepTone> tone = this->getFieldValue(fieldTone);
      static const auto fieldEnabled = clazz->getField<jboolean>("enabled");
      jboolean enabled = this->getFieldValue(fieldEnabled);
      static const auto fieldCustomLevel = clazz->getField<jni::JDouble>("customLevel");
      jni::local_ref<jni::JDouble> customLevel = this->getFieldValue(fieldCustomLevel);
      return BeepSettings(
        volume->toCpp(),
        tone->toCpp(),
        static_cast<bool>(enabled),
        customLevel != nullptr ? std::make_optional(customLevel->value()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JBeepSettings::javaobject> fromCpp(const BeepSettings& value) {
      return newInstance(
        JBeepVolume::fromCpp(value.volume),
        JBeepTone::fromCpp(value.tone),
        value.enabled,
        value.customLevel.has_value() ? jni::JDouble::valueOf(value.customLevel.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::bleprintandscan
