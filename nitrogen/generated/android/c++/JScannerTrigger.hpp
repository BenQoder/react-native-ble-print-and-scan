///
/// JScannerTrigger.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "ScannerTrigger.hpp"

namespace margelo::nitro::bleprintandscan {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "ScannerTrigger" and the the Kotlin enum "ScannerTrigger".
   */
  struct JScannerTrigger final: public jni::JavaClass<JScannerTrigger> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/bleprintandscan/ScannerTrigger;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum ScannerTrigger.
     */
    [[maybe_unused]]
    [[nodiscard]]
    ScannerTrigger toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("_ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<ScannerTrigger>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JScannerTrigger> fromCpp(ScannerTrigger value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldSOFT_TRIGGER_1S = clazz->getStaticField<JScannerTrigger>("SOFT_TRIGGER_1S");
      static const auto fieldSOFT_TRIGGER_2S = clazz->getStaticField<JScannerTrigger>("SOFT_TRIGGER_2S");
      static const auto fieldSOFT_TRIGGER_3S = clazz->getStaticField<JScannerTrigger>("SOFT_TRIGGER_3S");
      static const auto fieldSOFT_TRIGGER_4S = clazz->getStaticField<JScannerTrigger>("SOFT_TRIGGER_4S");
      static const auto fieldSOFT_TRIGGER_5S = clazz->getStaticField<JScannerTrigger>("SOFT_TRIGGER_5S");
      static const auto fieldSOFT_TRIGGER_6S = clazz->getStaticField<JScannerTrigger>("SOFT_TRIGGER_6S");
      static const auto fieldSOFT_TRIGGER_7S = clazz->getStaticField<JScannerTrigger>("SOFT_TRIGGER_7S");
      
      switch (value) {
        case ScannerTrigger::SOFT_TRIGGER_1S:
          return clazz->getStaticFieldValue(fieldSOFT_TRIGGER_1S);
        case ScannerTrigger::SOFT_TRIGGER_2S:
          return clazz->getStaticFieldValue(fieldSOFT_TRIGGER_2S);
        case ScannerTrigger::SOFT_TRIGGER_3S:
          return clazz->getStaticFieldValue(fieldSOFT_TRIGGER_3S);
        case ScannerTrigger::SOFT_TRIGGER_4S:
          return clazz->getStaticFieldValue(fieldSOFT_TRIGGER_4S);
        case ScannerTrigger::SOFT_TRIGGER_5S:
          return clazz->getStaticFieldValue(fieldSOFT_TRIGGER_5S);
        case ScannerTrigger::SOFT_TRIGGER_6S:
          return clazz->getStaticFieldValue(fieldSOFT_TRIGGER_6S);
        case ScannerTrigger::SOFT_TRIGGER_7S:
          return clazz->getStaticFieldValue(fieldSOFT_TRIGGER_7S);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::bleprintandscan
