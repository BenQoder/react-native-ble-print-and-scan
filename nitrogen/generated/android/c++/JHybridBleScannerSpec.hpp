///
/// HybridBleScannerSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridBleScannerSpec.hpp"




namespace margelo::nitro::bleprintandscan {

  using namespace facebook;

  class JHybridBleScannerSpec: public jni::HybridClass<JHybridBleScannerSpec, JHybridObject>,
                               public virtual HybridBleScannerSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/bleprintandscan/HybridBleScannerSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridBleScannerSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridBleScannerSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridBleScannerSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;

  public:
    inline const jni::global_ref<JHybridBleScannerSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    std::shared_ptr<Promise<void>> initializeScanner() override;
    std::shared_ptr<Promise<void>> startScanningForScanners(const std::function<void(const std::vector<Device>& /* devices */)>& onScannerFound) override;
    std::shared_ptr<Promise<void>> suspendScanForScanners() override;
    std::shared_ptr<Promise<void>> connectToScanner(const std::string& deviceId) override;
    std::shared_ptr<Promise<void>> disconnectFromScanner(const std::string& deviceId) override;
    std::shared_ptr<Promise<bool>> isScannerConnected(const std::string& deviceId) override;
    std::shared_ptr<Promise<std::vector<Device>>> getConnectedScanners() override;
    std::shared_ptr<Promise<void>> disconnectAllScanners() override;
    std::shared_ptr<Promise<void>> startListening(const std::string& deviceId, const std::function<void(const ScanResult& /* result */)>& onScanResult) override;
    std::shared_ptr<Promise<void>> stopListening(const std::string& deviceId) override;
    std::shared_ptr<Promise<void>> triggerScan(const std::string& deviceId, ScannerTrigger duration) override;
    std::shared_ptr<Promise<void>> setScannerMode(const std::string& deviceId, ScannerMode mode) override;
    std::shared_ptr<Promise<void>> setBeepSettings(const std::string& deviceId, const BeepSettings& settings) override;
    std::shared_ptr<Promise<void>> setPowerSettings(const std::string& deviceId, const PowerSettings& settings) override;
    std::shared_ptr<Promise<void>> setDataFormatSettings(const std::string& deviceId, const DataFormatSettings& settings) override;
    std::shared_ptr<Promise<void>> setTimestamp(const std::string& deviceId, TimestampFormat format, const std::optional<std::string>& datetime) override;
    std::shared_ptr<Promise<void>> restoreFactorySettings(const std::string& deviceId) override;
    std::shared_ptr<Promise<void>> customBeep(const std::string& deviceId, double level) override;
    std::shared_ptr<Promise<void>> customBeepTime(const std::string& deviceId, double timeMs, double type, double frequencyHz) override;
    std::shared_ptr<Promise<void>> powerOff(const std::string& deviceId) override;
    std::shared_ptr<Promise<double>> getStoredDataCount(const std::string& deviceId) override;
    std::shared_ptr<Promise<std::vector<ScanResult>>> uploadStoredData(const std::string& deviceId, bool clearAfterUpload) override;
    std::shared_ptr<Promise<void>> clearStoredData(const std::string& deviceId) override;
    std::shared_ptr<Promise<std::string>> sendRawCommand(const std::string& deviceId, const std::string& command) override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridBleScannerSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::bleprintandscan
