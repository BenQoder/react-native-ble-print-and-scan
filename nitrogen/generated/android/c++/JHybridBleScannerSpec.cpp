///
/// JHybridBleScannerSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridBleScannerSpec.hpp"

// Forward declaration of `Device` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct Device; }
// Forward declaration of `ScanResult` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct ScanResult; }
// Forward declaration of `ScannerTrigger` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class ScannerTrigger; }
// Forward declaration of `ScannerMode` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class ScannerMode; }
// Forward declaration of `BeepSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct BeepSettings; }
// Forward declaration of `BeepVolume` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class BeepVolume; }
// Forward declaration of `BeepTone` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class BeepTone; }
// Forward declaration of `PowerSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct PowerSettings; }
// Forward declaration of `DataFormatSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct DataFormatSettings; }
// Forward declaration of `TimestampFormat` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class TimestampFormat; }

#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include "Device.hpp"
#include <vector>
#include "JDevice.hpp"
#include <string>
#include "ScanResult.hpp"
#include "JScanResult.hpp"
#include <functional>
#include "JFunc_void_std__vector_Device_.hpp"
#include "JFunc_void_ScanResult.hpp"
#include "ScannerTrigger.hpp"
#include "JScannerTrigger.hpp"
#include "ScannerMode.hpp"
#include "JScannerMode.hpp"
#include "BeepSettings.hpp"
#include "JBeepSettings.hpp"
#include "BeepVolume.hpp"
#include "JBeepVolume.hpp"
#include "BeepTone.hpp"
#include "JBeepTone.hpp"
#include <optional>
#include "PowerSettings.hpp"
#include "JPowerSettings.hpp"
#include "DataFormatSettings.hpp"
#include "JDataFormatSettings.hpp"
#include "TimestampFormat.hpp"
#include "JTimestampFormat.hpp"

namespace margelo::nitro::bleprintandscan {

  jni::local_ref<JHybridBleScannerSpec::jhybriddata> JHybridBleScannerSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridBleScannerSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridBleScannerSpec::initHybrid),
    });
  }

  size_t JHybridBleScannerSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridBleScannerSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridBleScannerSpec::dispose() {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::initializeScanner() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("initializeScanner");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::startScanningForScanners(const std::function<void(const std::vector<Device>& /* devices */)>& onScannerFound) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JFunc_void_std__vector_Device_::javaobject> /* onScannerFound */)>("startScanningForScanners_cxx");
    auto __result = method(_javaPart, JFunc_void_std__vector_Device__cxx::fromCpp(onScannerFound));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::suspendScanForScanners() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("suspendScanForScanners");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::connectToScanner(const std::string& deviceId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */)>("connectToScanner");
    auto __result = method(_javaPart, jni::make_jstring(deviceId));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::disconnectFromScanner(const std::string& deviceId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */)>("disconnectFromScanner");
    auto __result = method(_javaPart, jni::make_jstring(deviceId));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<bool>> JHybridBleScannerSpec::isScannerConnected(const std::string& deviceId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */)>("isScannerConnected");
    auto __result = method(_javaPart, jni::make_jstring(deviceId));
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::vector<Device>>> JHybridBleScannerSpec::getConnectedScanners() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("getConnectedScanners");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::vector<Device>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JDevice>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<Device> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::disconnectAllScanners() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("disconnectAllScanners");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::startListening(const std::string& deviceId, const std::function<void(const ScanResult& /* result */)>& onScanResult) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */, jni::alias_ref<JFunc_void_ScanResult::javaobject> /* onScanResult */)>("startListening_cxx");
    auto __result = method(_javaPart, jni::make_jstring(deviceId), JFunc_void_ScanResult_cxx::fromCpp(onScanResult));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::stopListening(const std::string& deviceId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */)>("stopListening");
    auto __result = method(_javaPart, jni::make_jstring(deviceId));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::triggerScan(const std::string& deviceId, ScannerTrigger duration) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */, jni::alias_ref<JScannerTrigger> /* duration */)>("triggerScan");
    auto __result = method(_javaPart, jni::make_jstring(deviceId), JScannerTrigger::fromCpp(duration));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::setScannerMode(const std::string& deviceId, ScannerMode mode) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */, jni::alias_ref<JScannerMode> /* mode */)>("setScannerMode");
    auto __result = method(_javaPart, jni::make_jstring(deviceId), JScannerMode::fromCpp(mode));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::setBeepSettings(const std::string& deviceId, const BeepSettings& settings) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */, jni::alias_ref<JBeepSettings> /* settings */)>("setBeepSettings");
    auto __result = method(_javaPart, jni::make_jstring(deviceId), JBeepSettings::fromCpp(settings));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::setPowerSettings(const std::string& deviceId, const PowerSettings& settings) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */, jni::alias_ref<JPowerSettings> /* settings */)>("setPowerSettings");
    auto __result = method(_javaPart, jni::make_jstring(deviceId), JPowerSettings::fromCpp(settings));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::setDataFormatSettings(const std::string& deviceId, const DataFormatSettings& settings) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */, jni::alias_ref<JDataFormatSettings> /* settings */)>("setDataFormatSettings");
    auto __result = method(_javaPart, jni::make_jstring(deviceId), JDataFormatSettings::fromCpp(settings));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::setTimestamp(const std::string& deviceId, TimestampFormat format, const std::optional<std::string>& datetime) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */, jni::alias_ref<JTimestampFormat> /* format */, jni::alias_ref<jni::JString> /* datetime */)>("setTimestamp");
    auto __result = method(_javaPart, jni::make_jstring(deviceId), JTimestampFormat::fromCpp(format), datetime.has_value() ? jni::make_jstring(datetime.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::restoreFactorySettings(const std::string& deviceId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */)>("restoreFactorySettings");
    auto __result = method(_javaPart, jni::make_jstring(deviceId));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::customBeep(const std::string& deviceId, double level) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */, double /* level */)>("customBeep");
    auto __result = method(_javaPart, jni::make_jstring(deviceId), level);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::customBeepTime(const std::string& deviceId, double timeMs, double type, double frequencyHz) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */, double /* timeMs */, double /* type */, double /* frequencyHz */)>("customBeepTime");
    auto __result = method(_javaPart, jni::make_jstring(deviceId), timeMs, type, frequencyHz);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::powerOff(const std::string& deviceId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */)>("powerOff");
    auto __result = method(_javaPart, jni::make_jstring(deviceId));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<double>> JHybridBleScannerSpec::getStoredDataCount(const std::string& deviceId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */)>("getStoredDataCount");
    auto __result = method(_javaPart, jni::make_jstring(deviceId));
    return [&]() {
      auto __promise = Promise<double>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JDouble>(__boxedResult);
        __promise->resolve(__result->value());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::vector<ScanResult>>> JHybridBleScannerSpec::uploadStoredData(const std::string& deviceId, bool clearAfterUpload) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */, jboolean /* clearAfterUpload */)>("uploadStoredData");
    auto __result = method(_javaPart, jni::make_jstring(deviceId), clearAfterUpload);
    return [&]() {
      auto __promise = Promise<std::vector<ScanResult>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JScanResult>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<ScanResult> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBleScannerSpec::clearStoredData(const std::string& deviceId) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */)>("clearStoredData");
    auto __result = method(_javaPart, jni::make_jstring(deviceId));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::string>> JHybridBleScannerSpec::sendRawCommand(const std::string& deviceId, const std::string& command) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* deviceId */, jni::alias_ref<jni::JString> /* command */)>("sendRawCommand");
    auto __result = method(_javaPart, jni::make_jstring(deviceId), jni::make_jstring(command));
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::bleprintandscan
