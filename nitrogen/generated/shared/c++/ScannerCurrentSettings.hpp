///
/// ScannerCurrentSettings.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ScannerMode` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class ScannerMode; }
// Forward declaration of `BeepSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct BeepSettings; }
// Forward declaration of `PowerSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct PowerSettings; }
// Forward declaration of `DataFormatSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct DataFormatSettings; }

#include "ScannerMode.hpp"
#include "BeepSettings.hpp"
#include "PowerSettings.hpp"
#include "DataFormatSettings.hpp"

namespace margelo::nitro::bleprintandscan {

  /**
   * A struct which can be represented as a JavaScript object (ScannerCurrentSettings).
   */
  struct ScannerCurrentSettings {
  public:
    ScannerMode workMode     SWIFT_PRIVATE;
    BeepSettings beepSettings     SWIFT_PRIVATE;
    PowerSettings powerSettings     SWIFT_PRIVATE;
    DataFormatSettings dataFormatSettings     SWIFT_PRIVATE;
    bool timestampEnabled     SWIFT_PRIVATE;

  public:
    ScannerCurrentSettings() = default;
    explicit ScannerCurrentSettings(ScannerMode workMode, BeepSettings beepSettings, PowerSettings powerSettings, DataFormatSettings dataFormatSettings, bool timestampEnabled): workMode(workMode), beepSettings(beepSettings), powerSettings(powerSettings), dataFormatSettings(dataFormatSettings), timestampEnabled(timestampEnabled) {}
  };

} // namespace margelo::nitro::bleprintandscan

namespace margelo::nitro {

  using namespace margelo::nitro::bleprintandscan;

  // C++ ScannerCurrentSettings <> JS ScannerCurrentSettings (object)
  template <>
  struct JSIConverter<ScannerCurrentSettings> final {
    static inline ScannerCurrentSettings fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ScannerCurrentSettings(
        JSIConverter<ScannerMode>::fromJSI(runtime, obj.getProperty(runtime, "workMode")),
        JSIConverter<BeepSettings>::fromJSI(runtime, obj.getProperty(runtime, "beepSettings")),
        JSIConverter<PowerSettings>::fromJSI(runtime, obj.getProperty(runtime, "powerSettings")),
        JSIConverter<DataFormatSettings>::fromJSI(runtime, obj.getProperty(runtime, "dataFormatSettings")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "timestampEnabled"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ScannerCurrentSettings& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "workMode", JSIConverter<ScannerMode>::toJSI(runtime, arg.workMode));
      obj.setProperty(runtime, "beepSettings", JSIConverter<BeepSettings>::toJSI(runtime, arg.beepSettings));
      obj.setProperty(runtime, "powerSettings", JSIConverter<PowerSettings>::toJSI(runtime, arg.powerSettings));
      obj.setProperty(runtime, "dataFormatSettings", JSIConverter<DataFormatSettings>::toJSI(runtime, arg.dataFormatSettings));
      obj.setProperty(runtime, "timestampEnabled", JSIConverter<bool>::toJSI(runtime, arg.timestampEnabled));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<ScannerMode>::canConvert(runtime, obj.getProperty(runtime, "workMode"))) return false;
      if (!JSIConverter<BeepSettings>::canConvert(runtime, obj.getProperty(runtime, "beepSettings"))) return false;
      if (!JSIConverter<PowerSettings>::canConvert(runtime, obj.getProperty(runtime, "powerSettings"))) return false;
      if (!JSIConverter<DataFormatSettings>::canConvert(runtime, obj.getProperty(runtime, "dataFormatSettings"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "timestampEnabled"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
