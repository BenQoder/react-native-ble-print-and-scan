///
/// DataFormatSettings.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif





namespace margelo::nitro::bleprintandscan {

  /**
   * A struct which can be represented as a JavaScript object (DataFormatSettings).
   */
  struct DataFormatSettings {
  public:
    bool prefixEnabled     SWIFT_PRIVATE;
    bool suffixEnabled     SWIFT_PRIVATE;
    bool hideBarcodePrefix     SWIFT_PRIVATE;
    bool hideBarcodeContent     SWIFT_PRIVATE;
    bool hideBarcodeSuffix     SWIFT_PRIVATE;

  public:
    DataFormatSettings() = default;
    explicit DataFormatSettings(bool prefixEnabled, bool suffixEnabled, bool hideBarcodePrefix, bool hideBarcodeContent, bool hideBarcodeSuffix): prefixEnabled(prefixEnabled), suffixEnabled(suffixEnabled), hideBarcodePrefix(hideBarcodePrefix), hideBarcodeContent(hideBarcodeContent), hideBarcodeSuffix(hideBarcodeSuffix) {}
  };

} // namespace margelo::nitro::bleprintandscan

namespace margelo::nitro {

  using namespace margelo::nitro::bleprintandscan;

  // C++ DataFormatSettings <> JS DataFormatSettings (object)
  template <>
  struct JSIConverter<DataFormatSettings> final {
    static inline DataFormatSettings fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return DataFormatSettings(
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "prefixEnabled")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "suffixEnabled")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "hideBarcodePrefix")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "hideBarcodeContent")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "hideBarcodeSuffix"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const DataFormatSettings& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "prefixEnabled", JSIConverter<bool>::toJSI(runtime, arg.prefixEnabled));
      obj.setProperty(runtime, "suffixEnabled", JSIConverter<bool>::toJSI(runtime, arg.suffixEnabled));
      obj.setProperty(runtime, "hideBarcodePrefix", JSIConverter<bool>::toJSI(runtime, arg.hideBarcodePrefix));
      obj.setProperty(runtime, "hideBarcodeContent", JSIConverter<bool>::toJSI(runtime, arg.hideBarcodeContent));
      obj.setProperty(runtime, "hideBarcodeSuffix", JSIConverter<bool>::toJSI(runtime, arg.hideBarcodeSuffix));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "prefixEnabled"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "suffixEnabled"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "hideBarcodePrefix"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "hideBarcodeContent"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "hideBarcodeSuffix"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
