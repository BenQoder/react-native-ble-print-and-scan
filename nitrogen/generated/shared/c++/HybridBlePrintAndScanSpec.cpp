///
/// HybridBlePrintAndScanSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridBlePrintAndScanSpec.hpp"

namespace margelo::nitro::bleprintandscan {

  void HybridBlePrintAndScanSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridMethod("sum", &HybridBlePrintAndScanSpec::sum);
      prototype.registerHybridMethod("initializeBluetooth", &HybridBlePrintAndScanSpec::initializeBluetooth);
      prototype.registerHybridMethod("startScanningForBluetoothDevices", &HybridBlePrintAndScanSpec::startScanningForBluetoothDevices);
      prototype.registerHybridMethod("suspendScanForBluetoothDevices", &HybridBlePrintAndScanSpec::suspendScanForBluetoothDevices);
      prototype.registerHybridMethod("connectToBluetoothDevice", &HybridBlePrintAndScanSpec::connectToBluetoothDevice);
      prototype.registerHybridMethod("disconnectFromBluetoothDevice", &HybridBlePrintAndScanSpec::disconnectFromBluetoothDevice);
      prototype.registerHybridMethod("generateBytecode", &HybridBlePrintAndScanSpec::generateBytecode);
      prototype.registerHybridMethod("generateBytecodeBase64", &HybridBlePrintAndScanSpec::generateBytecodeBase64);
      prototype.registerHybridMethod("sendToBluetoothThermalPrinter", &HybridBlePrintAndScanSpec::sendToBluetoothThermalPrinter);
      prototype.registerHybridMethod("sendToUsbThermalPrinter", &HybridBlePrintAndScanSpec::sendToUsbThermalPrinter);
    });
  }

} // namespace margelo::nitro::bleprintandscan
