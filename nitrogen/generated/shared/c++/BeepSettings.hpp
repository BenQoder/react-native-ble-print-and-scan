///
/// BeepSettings.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `BeepVolume` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class BeepVolume; }
// Forward declaration of `BeepTone` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class BeepTone; }

#include "BeepVolume.hpp"
#include "BeepTone.hpp"
#include <optional>

namespace margelo::nitro::bleprintandscan {

  /**
   * A struct which can be represented as a JavaScript object (BeepSettings).
   */
  struct BeepSettings {
  public:
    BeepVolume volume     SWIFT_PRIVATE;
    BeepTone tone     SWIFT_PRIVATE;
    bool enabled     SWIFT_PRIVATE;
    std::optional<double> customLevel     SWIFT_PRIVATE;

  public:
    BeepSettings() = default;
    explicit BeepSettings(BeepVolume volume, BeepTone tone, bool enabled, std::optional<double> customLevel): volume(volume), tone(tone), enabled(enabled), customLevel(customLevel) {}
  };

} // namespace margelo::nitro::bleprintandscan

namespace margelo::nitro {

  using namespace margelo::nitro::bleprintandscan;

  // C++ BeepSettings <> JS BeepSettings (object)
  template <>
  struct JSIConverter<BeepSettings> final {
    static inline BeepSettings fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return BeepSettings(
        JSIConverter<BeepVolume>::fromJSI(runtime, obj.getProperty(runtime, "volume")),
        JSIConverter<BeepTone>::fromJSI(runtime, obj.getProperty(runtime, "tone")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "enabled")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "customLevel"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const BeepSettings& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "volume", JSIConverter<BeepVolume>::toJSI(runtime, arg.volume));
      obj.setProperty(runtime, "tone", JSIConverter<BeepTone>::toJSI(runtime, arg.tone));
      obj.setProperty(runtime, "enabled", JSIConverter<bool>::toJSI(runtime, arg.enabled));
      obj.setProperty(runtime, "customLevel", JSIConverter<std::optional<double>>::toJSI(runtime, arg.customLevel));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<BeepVolume>::canConvert(runtime, obj.getProperty(runtime, "volume"))) return false;
      if (!JSIConverter<BeepTone>::canConvert(runtime, obj.getProperty(runtime, "tone"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "enabled"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "customLevel"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
