///
/// ScannerInfo.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::bleprintandscan {

  /**
   * A struct which can be represented as a JavaScript object (ScannerInfo).
   */
  struct ScannerInfo {
  public:
    std::string firmwareVersion     SWIFT_PRIVATE;
    std::string moduleType     SWIFT_PRIVATE;
    std::optional<double> batteryLevel     SWIFT_PRIVATE;
    bool isConnected     SWIFT_PRIVATE;

  public:
    ScannerInfo() = default;
    explicit ScannerInfo(std::string firmwareVersion, std::string moduleType, std::optional<double> batteryLevel, bool isConnected): firmwareVersion(firmwareVersion), moduleType(moduleType), batteryLevel(batteryLevel), isConnected(isConnected) {}
  };

} // namespace margelo::nitro::bleprintandscan

namespace margelo::nitro {

  using namespace margelo::nitro::bleprintandscan;

  // C++ ScannerInfo <> JS ScannerInfo (object)
  template <>
  struct JSIConverter<ScannerInfo> final {
    static inline ScannerInfo fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ScannerInfo(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "firmwareVersion")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "moduleType")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "batteryLevel")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "isConnected"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ScannerInfo& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "firmwareVersion", JSIConverter<std::string>::toJSI(runtime, arg.firmwareVersion));
      obj.setProperty(runtime, "moduleType", JSIConverter<std::string>::toJSI(runtime, arg.moduleType));
      obj.setProperty(runtime, "batteryLevel", JSIConverter<std::optional<double>>::toJSI(runtime, arg.batteryLevel));
      obj.setProperty(runtime, "isConnected", JSIConverter<bool>::toJSI(runtime, arg.isConnected));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "firmwareVersion"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "moduleType"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "batteryLevel"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "isConnected"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
