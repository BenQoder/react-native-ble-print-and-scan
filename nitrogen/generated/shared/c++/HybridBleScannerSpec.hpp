///
/// HybridBleScannerSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Device` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct Device; }
// Forward declaration of `ScanResult` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct ScanResult; }
// Forward declaration of `ScannerTrigger` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class ScannerTrigger; }
// Forward declaration of `ScannerMode` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class ScannerMode; }
// Forward declaration of `BeepSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct BeepSettings; }
// Forward declaration of `PowerSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct PowerSettings; }
// Forward declaration of `DataFormatSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct DataFormatSettings; }
// Forward declaration of `TimestampFormat` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class TimestampFormat; }

#include <NitroModules/Promise.hpp>
#include "Device.hpp"
#include <vector>
#include <functional>
#include <string>
#include "ScanResult.hpp"
#include "ScannerTrigger.hpp"
#include "ScannerMode.hpp"
#include "BeepSettings.hpp"
#include "PowerSettings.hpp"
#include "DataFormatSettings.hpp"
#include "TimestampFormat.hpp"
#include <optional>

namespace margelo::nitro::bleprintandscan {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `BleScanner`
   * Inherit this class to create instances of `HybridBleScannerSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridBleScanner: public HybridBleScannerSpec {
   * public:
   *   HybridBleScanner(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridBleScannerSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridBleScannerSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridBleScannerSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual void dispose() = 0;
      virtual std::shared_ptr<Promise<void>> initializeScanner() = 0;
      virtual std::shared_ptr<Promise<void>> startScanningForScanners(const std::function<void(const std::vector<Device>& /* devices */)>& onScannerFound) = 0;
      virtual std::shared_ptr<Promise<void>> suspendScanForScanners() = 0;
      virtual std::shared_ptr<Promise<void>> connectToScanner(const std::string& deviceId) = 0;
      virtual std::shared_ptr<Promise<void>> disconnectFromScanner(const std::string& deviceId) = 0;
      virtual std::shared_ptr<Promise<bool>> isScannerConnected(const std::string& deviceId) = 0;
      virtual std::shared_ptr<Promise<std::vector<Device>>> getConnectedScanners() = 0;
      virtual std::shared_ptr<Promise<void>> disconnectAllScanners() = 0;
      virtual std::shared_ptr<Promise<void>> startListening(const std::string& deviceId, const std::function<void(const ScanResult& /* result */)>& onScanResult) = 0;
      virtual std::shared_ptr<Promise<void>> stopListening(const std::string& deviceId) = 0;
      virtual std::shared_ptr<Promise<void>> triggerScan(const std::string& deviceId, ScannerTrigger duration) = 0;
      virtual std::shared_ptr<Promise<void>> setScannerMode(const std::string& deviceId, ScannerMode mode) = 0;
      virtual std::shared_ptr<Promise<void>> setBeepSettings(const std::string& deviceId, const BeepSettings& settings) = 0;
      virtual std::shared_ptr<Promise<void>> setPowerSettings(const std::string& deviceId, const PowerSettings& settings) = 0;
      virtual std::shared_ptr<Promise<void>> setDataFormatSettings(const std::string& deviceId, const DataFormatSettings& settings) = 0;
      virtual std::shared_ptr<Promise<void>> setTimestamp(const std::string& deviceId, TimestampFormat format, const std::optional<std::string>& datetime) = 0;
      virtual std::shared_ptr<Promise<void>> restoreFactorySettings(const std::string& deviceId) = 0;
      virtual std::shared_ptr<Promise<void>> customBeep(const std::string& deviceId, double level) = 0;
      virtual std::shared_ptr<Promise<void>> customBeepTime(const std::string& deviceId, double timeMs, double type, double frequencyHz) = 0;
      virtual std::shared_ptr<Promise<void>> powerOff(const std::string& deviceId) = 0;
      virtual std::shared_ptr<Promise<double>> getStoredDataCount(const std::string& deviceId) = 0;
      virtual std::shared_ptr<Promise<std::vector<ScanResult>>> uploadStoredData(const std::string& deviceId, bool clearAfterUpload) = 0;
      virtual std::shared_ptr<Promise<void>> clearStoredData(const std::string& deviceId) = 0;
      virtual std::shared_ptr<Promise<std::string>> sendRawCommand(const std::string& deviceId, const std::string& command) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "BleScanner";
  };

} // namespace margelo::nitro::bleprintandscan
