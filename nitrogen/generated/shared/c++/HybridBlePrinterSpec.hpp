///
/// HybridBlePrinterSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Device` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct Device; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <NitroModules/Promise.hpp>
#include "Device.hpp"
#include <vector>
#include <functional>
#include <string>
#include <NitroModules/ArrayBuffer.hpp>

namespace margelo::nitro::bleprintandscan {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `BlePrinter`
   * Inherit this class to create instances of `HybridBlePrinterSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridBlePrinter: public HybridBlePrinterSpec {
   * public:
   *   HybridBlePrinter(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridBlePrinterSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridBlePrinterSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridBlePrinterSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual void dispose() = 0;
      virtual std::shared_ptr<Promise<void>> initializePrinter() = 0;
      virtual std::shared_ptr<Promise<void>> startScanningForPrinters(const std::function<void(const std::vector<Device>& /* devices */)>& onDeviceFound) = 0;
      virtual std::shared_ptr<Promise<void>> suspendScanForPrinters() = 0;
      virtual std::shared_ptr<Promise<void>> connectToPrinter(const std::string& deviceId) = 0;
      virtual std::shared_ptr<Promise<void>> disconnectFromPrinter(const std::string& deviceId) = 0;
      virtual std::shared_ptr<Promise<bool>> isPrinterConnected(const std::string& deviceId) = 0;
      virtual std::shared_ptr<Promise<std::vector<Device>>> getConnectedPrinters() = 0;
      virtual std::shared_ptr<Promise<void>> disconnectAllPrinters() = 0;
      virtual std::shared_ptr<Promise<std::vector<std::shared_ptr<ArrayBuffer>>>> generateBytecode(const std::string& value, double printerWidth, double mtuSize) = 0;
      virtual std::shared_ptr<Promise<std::vector<std::string>>> generateBytecodeBase64(const std::string& value, double printerWidth, double mtuSize) = 0;
      virtual std::shared_ptr<Promise<void>> sendToBluetoothThermalPrinter(const std::string& deviceId, const std::string& value, double printerWidth) = 0;
      virtual std::shared_ptr<Promise<void>> sendToUsbThermalPrinter(const std::string& value, double printerWidth, double chunkSize) = 0;
      virtual std::shared_ptr<Promise<void>> feedPaper(const std::string& deviceId, double lines) = 0;
      virtual std::shared_ptr<Promise<void>> cutPaper(const std::string& deviceId) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "BlePrinter";
  };

} // namespace margelo::nitro::bleprintandscan
