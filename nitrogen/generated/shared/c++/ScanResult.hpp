///
/// ScanResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::bleprintandscan {

  /**
   * A struct which can be represented as a JavaScript object (ScanResult).
   */
  struct ScanResult {
  public:
    std::string data     SWIFT_PRIVATE;
    std::string timestamp     SWIFT_PRIVATE;
    std::string deviceId     SWIFT_PRIVATE;
    std::string deviceName     SWIFT_PRIVATE;

  public:
    ScanResult() = default;
    explicit ScanResult(std::string data, std::string timestamp, std::string deviceId, std::string deviceName): data(data), timestamp(timestamp), deviceId(deviceId), deviceName(deviceName) {}
  };

} // namespace margelo::nitro::bleprintandscan

namespace margelo::nitro {

  using namespace margelo::nitro::bleprintandscan;

  // C++ ScanResult <> JS ScanResult (object)
  template <>
  struct JSIConverter<ScanResult> final {
    static inline ScanResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ScanResult(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "data")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "timestamp")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "deviceId")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "deviceName"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ScanResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "data", JSIConverter<std::string>::toJSI(runtime, arg.data));
      obj.setProperty(runtime, "timestamp", JSIConverter<std::string>::toJSI(runtime, arg.timestamp));
      obj.setProperty(runtime, "deviceId", JSIConverter<std::string>::toJSI(runtime, arg.deviceId));
      obj.setProperty(runtime, "deviceName", JSIConverter<std::string>::toJSI(runtime, arg.deviceName));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "data"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "timestamp"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "deviceId"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "deviceName"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
