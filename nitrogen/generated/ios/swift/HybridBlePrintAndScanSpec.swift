///
/// HybridBlePrintAndScanSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridBlePrintAndScanSpec``
public protocol HybridBlePrintAndScanSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func sum(num1: Double, num2: Double) throws -> Double
  func initializeBluetooth() throws -> Promise<Void>
  func startScanningForBluetoothDevices(onDeviceFound: @escaping (_ devices: [Device]) -> Void) throws -> Promise<Void>
  func suspendScanForBluetoothDevices() throws -> Promise<Void>
  func connectToBluetoothDevice(deviceId: String) throws -> Promise<Void>
  func disconnectFromBluetoothDevice() throws -> Promise<Void>
  func generateBytecode(value: String, printerWidth: Double, mtuSize: Double) throws -> Promise<[ArrayBuffer]>
  func generateBytecodeBase64(value: String, printerWidth: Double, mtuSize: Double) throws -> Promise<[String]>
  func sendToBluetoothThermalPrinter(value: String, printerWidth: Double) throws -> Promise<Void>
  func sendToUsbThermalPrinter(value: String, printerWidth: Double, chunkSize: Double) throws -> Promise<Void>
}

/// See ``HybridBlePrintAndScanSpec``
open class HybridBlePrintAndScanSpec_base {
  private weak var cxxWrapper: HybridBlePrintAndScanSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridBlePrintAndScanSpec_cxx {
  #if DEBUG
    guard self is HybridBlePrintAndScanSpec else {
      fatalError("`self` is not a `HybridBlePrintAndScanSpec`! Did you accidentally inherit from `HybridBlePrintAndScanSpec_base` instead of `HybridBlePrintAndScanSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridBlePrintAndScanSpec_cxx(self as! HybridBlePrintAndScanSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the BlePrintAndScan HybridObject.
 * Implement this protocol to create Swift-based instances of BlePrintAndScan.
 * ```swift
 * class HybridBlePrintAndScan : HybridBlePrintAndScanSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridBlePrintAndScanSpec = HybridBlePrintAndScanSpec_protocol & HybridBlePrintAndScanSpec_base
