///
/// HybridBlePrinterSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridBlePrinterSpec``
public protocol HybridBlePrinterSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func initializePrinter() throws -> Promise<Void>
  func startScanningForPrinters(onDeviceFound: @escaping (_ devices: [Device]) -> Void) throws -> Promise<Void>
  func suspendScanForPrinters() throws -> Promise<Void>
  func connectToPrinter(deviceId: String) throws -> Promise<Void>
  func disconnectFromPrinter(deviceId: String) throws -> Promise<Void>
  func isPrinterConnected(deviceId: String) throws -> Promise<Bool>
  func getConnectedPrinters() throws -> Promise<[Device]>
  func disconnectAllPrinters() throws -> Promise<Void>
  func generateBytecode(value: String, printerWidth: Double, mtuSize: Double) throws -> Promise<[ArrayBuffer]>
  func generateBytecodeBase64(value: String, printerWidth: Double, mtuSize: Double) throws -> Promise<[String]>
  func sendToBluetoothThermalPrinter(deviceId: String, value: String, printerWidth: Double) throws -> Promise<Void>
  func sendToUsbThermalPrinter(value: String, printerWidth: Double, chunkSize: Double) throws -> Promise<Void>
  func feedPaper(deviceId: String, lines: Double) throws -> Promise<Void>
  func cutPaper(deviceId: String) throws -> Promise<Void>
}

/// See ``HybridBlePrinterSpec``
open class HybridBlePrinterSpec_base {
  private weak var cxxWrapper: HybridBlePrinterSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridBlePrinterSpec_cxx {
  #if DEBUG
    guard self is HybridBlePrinterSpec else {
      fatalError("`self` is not a `HybridBlePrinterSpec`! Did you accidentally inherit from `HybridBlePrinterSpec_base` instead of `HybridBlePrinterSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridBlePrinterSpec_cxx(self as! HybridBlePrinterSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the BlePrinter HybridObject.
 * Implement this protocol to create Swift-based instances of BlePrinter.
 * ```swift
 * class HybridBlePrinter : HybridBlePrinterSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridBlePrinterSpec = HybridBlePrinterSpec_protocol & HybridBlePrinterSpec_base
