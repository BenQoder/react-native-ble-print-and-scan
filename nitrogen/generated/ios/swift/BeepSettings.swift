///
/// BeepSettings.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `BeepSettings`, backed by a C++ struct.
 */
public typealias BeepSettings = margelo.nitro.bleprintandscan.BeepSettings

public extension BeepSettings {
  private typealias bridge = margelo.nitro.bleprintandscan.bridge.swift

  /**
   * Create a new instance of `BeepSettings`.
   */
  init(volume: BeepVolume, tone: BeepTone, enabled: Bool, customLevel: Double?) {
    self.init(volume, tone, enabled, { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = customLevel {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var volume: BeepVolume {
    @inline(__always)
    get {
      return self.__volume
    }
    @inline(__always)
    set {
      self.__volume = newValue
    }
  }
  
  var tone: BeepTone {
    @inline(__always)
    get {
      return self.__tone
    }
    @inline(__always)
    set {
      self.__tone = newValue
    }
  }
  
  var enabled: Bool {
    @inline(__always)
    get {
      return self.__enabled
    }
    @inline(__always)
    set {
      self.__enabled = newValue
    }
  }
  
  var customLevel: Double? {
    @inline(__always)
    get {
      return self.__customLevel.value
    }
    @inline(__always)
    set {
      self.__customLevel = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
