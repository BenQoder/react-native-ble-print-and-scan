///
/// HybridBlePrintAndScanSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridBlePrintAndScanSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
open class HybridBlePrintAndScanSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::bleprintandscan::bridge::swift`)
   * from `BlePrintAndScan-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.bleprintandscan.bridge.swift

  /**
   * Holds an instance of the `HybridBlePrintAndScanSpec` Swift protocol.
   */
  private var __implementation: any HybridBlePrintAndScanSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_margelo__nitro__bleprintandscan__HybridBlePrintAndScanSpec_

  /**
   * Create a new `HybridBlePrintAndScanSpec_cxx` that wraps the given `HybridBlePrintAndScanSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridBlePrintAndScanSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridBlePrintAndScanSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridBlePrintAndScanSpec() -> any HybridBlePrintAndScanSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridBlePrintAndScanSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridBlePrintAndScanSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridBlePrintAndScanSpec_cxx {
    return Unmanaged<HybridBlePrintAndScanSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<margelo::nitro::bleprintandscan::HybridBlePrintAndScanSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_margelo__nitro__bleprintandscan__HybridBlePrintAndScanSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_margelo__nitro__bleprintandscan__HybridBlePrintAndScanSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_margelo__nitro__bleprintandscan__HybridBlePrintAndScanSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public func dispose() {
    self.__implementation.dispose()
  }

  // Properties
  

  // Methods
  @inline(__always)
  public final func sum(num1: Double, num2: Double) -> bridge.Result_double_ {
    do {
      let __result = try self.__implementation.sum(num1: num1, num2: num2)
      let __resultCpp = __result
      return bridge.create_Result_double_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_double_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func initializeBluetooth() -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.initializeBluetooth()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func startScanningForBluetoothDevices(onDeviceFound: bridge.Func_void_std__vector_Device_) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.startScanningForBluetoothDevices(onDeviceFound: { () -> ([Device]) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_std__vector_Device_(onDeviceFound)
        return { (__devices: [Device]) -> Void in
          __wrappedFunction.call({ () -> bridge.std__vector_Device_ in
            var __vector = bridge.create_std__vector_Device_(__devices.count)
            for __item in __devices {
              __vector.push_back(__item)
            }
            return __vector
          }())
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func suspendScanForBluetoothDevices() -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.suspendScanForBluetoothDevices()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func connectToBluetoothDevice(deviceId: std.string) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.connectToBluetoothDevice(deviceId: String(deviceId))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func disconnectFromBluetoothDevice(deviceId: std.string) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.disconnectFromBluetoothDevice(deviceId: String(deviceId))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func isDeviceConnected(deviceId: std.string) -> bridge.Result_std__shared_ptr_Promise_bool___ {
    do {
      let __result = try self.__implementation.isDeviceConnected(deviceId: String(deviceId))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_bool__ in
        let __promise = bridge.create_std__shared_ptr_Promise_bool__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_bool__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getConnectedDevices() -> bridge.Result_std__shared_ptr_Promise_std__vector_Device____ {
    do {
      let __result = try self.__implementation.getConnectedDevices()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_Device___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_Device___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_Device___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__vector_Device_ in
              var __vector = bridge.create_std__vector_Device_(__result.count)
              for __item in __result {
                __vector.push_back(__item)
              }
              return __vector
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_Device____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_Device____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func disconnectAllDevices() -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.disconnectAllDevices()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func generateBytecode(value: std.string, printerWidth: Double, mtuSize: Double) -> bridge.Result_std__shared_ptr_Promise_std__vector_std__shared_ptr_ArrayBuffer_____ {
    do {
      let __result = try self.__implementation.generateBytecode(value: String(value), printerWidth: printerWidth, mtuSize: mtuSize)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_std__shared_ptr_ArrayBuffer____ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_std__shared_ptr_ArrayBuffer____()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_std__shared_ptr_ArrayBuffer____(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__vector_std__shared_ptr_ArrayBuffer__ in
              var __vector = bridge.create_std__vector_std__shared_ptr_ArrayBuffer__(__result.count)
              for __item in __result {
                __vector.push_back(__item.getArrayBuffer())
              }
              return __vector
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_std__shared_ptr_ArrayBuffer_____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_std__shared_ptr_ArrayBuffer_____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func generateBytecodeBase64(value: std.string, printerWidth: Double, mtuSize: Double) -> bridge.Result_std__shared_ptr_Promise_std__vector_std__string____ {
    do {
      let __result = try self.__implementation.generateBytecodeBase64(value: String(value), printerWidth: printerWidth, mtuSize: mtuSize)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_std__string___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_std__string___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_std__string___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__vector_std__string_ in
              var __vector = bridge.create_std__vector_std__string_(__result.count)
              for __item in __result {
                __vector.push_back(std.string(__item))
              }
              return __vector
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_std__string____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_std__string____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func sendToBluetoothThermalPrinter(deviceId: std.string, value: std.string, printerWidth: Double) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.sendToBluetoothThermalPrinter(deviceId: String(deviceId), value: String(value), printerWidth: printerWidth)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func sendToUsbThermalPrinter(value: std.string, printerWidth: Double, chunkSize: Double) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.sendToUsbThermalPrinter(value: String(value), printerWidth: printerWidth, chunkSize: chunkSize)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
}
