///
/// HybridBleScannerSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridBleScannerSpec``
public protocol HybridBleScannerSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func initializeScanner() throws -> Promise<Void>
  func startScanningForScanners(onScannerFound: @escaping (_ devices: [Device]) -> Void) throws -> Promise<Void>
  func suspendScanForScanners() throws -> Promise<Void>
  func connectToScanner(deviceId: String) throws -> Promise<Void>
  func disconnectFromScanner(deviceId: String) throws -> Promise<Void>
  func isScannerConnected(deviceId: String) throws -> Promise<Bool>
  func getConnectedScanners() throws -> Promise<[Device]>
  func disconnectAllScanners() throws -> Promise<Void>
  func startListening(deviceId: String, onScanResult: @escaping (_ result: ScanResult) -> Void) throws -> Promise<Void>
  func stopListening(deviceId: String) throws -> Promise<Void>
  func triggerScan(deviceId: String, duration: ScannerTrigger) throws -> Promise<Void>
  func setScannerMode(deviceId: String, mode: ScannerMode) throws -> Promise<Void>
  func setBeepSettings(deviceId: String, settings: BeepSettings) throws -> Promise<Void>
  func setPowerSettings(deviceId: String, settings: PowerSettings) throws -> Promise<Void>
  func setDataFormatSettings(deviceId: String, settings: DataFormatSettings) throws -> Promise<Void>
  func setTimestamp(deviceId: String, format: TimestampFormat, datetime: String?) throws -> Promise<Void>
  func restoreFactorySettings(deviceId: String) throws -> Promise<Void>
  func customBeep(deviceId: String, level: Double) throws -> Promise<Void>
  func customBeepTime(deviceId: String, timeMs: Double, type: Double, frequencyHz: Double) throws -> Promise<Void>
  func powerOff(deviceId: String) throws -> Promise<Void>
  func getStoredDataCount(deviceId: String) throws -> Promise<Double>
  func uploadStoredData(deviceId: String, clearAfterUpload: Bool) throws -> Promise<[ScanResult]>
  func clearStoredData(deviceId: String) throws -> Promise<Void>
  func sendRawCommand(deviceId: String, command: String) throws -> Promise<String>
}

/// See ``HybridBleScannerSpec``
open class HybridBleScannerSpec_base {
  private weak var cxxWrapper: HybridBleScannerSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridBleScannerSpec_cxx {
  #if DEBUG
    guard self is HybridBleScannerSpec else {
      fatalError("`self` is not a `HybridBleScannerSpec`! Did you accidentally inherit from `HybridBleScannerSpec_base` instead of `HybridBleScannerSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridBleScannerSpec_cxx(self as! HybridBleScannerSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the BleScanner HybridObject.
 * Implement this protocol to create Swift-based instances of BleScanner.
 * ```swift
 * class HybridBleScanner : HybridBleScannerSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridBleScannerSpec = HybridBleScannerSpec_protocol & HybridBleScannerSpec_base
