///
/// ScannerInfo.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `ScannerInfo`, backed by a C++ struct.
 */
public typealias ScannerInfo = margelo.nitro.bleprintandscan.ScannerInfo

public extension ScannerInfo {
  private typealias bridge = margelo.nitro.bleprintandscan.bridge.swift

  /**
   * Create a new instance of `ScannerInfo`.
   */
  init(firmwareVersion: String, moduleType: String, batteryLevel: Double?, isConnected: Bool) {
    self.init(std.string(firmwareVersion), std.string(moduleType), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = batteryLevel {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), isConnected)
  }

  var firmwareVersion: String {
    @inline(__always)
    get {
      return String(self.__firmwareVersion)
    }
    @inline(__always)
    set {
      self.__firmwareVersion = std.string(newValue)
    }
  }
  
  var moduleType: String {
    @inline(__always)
    get {
      return String(self.__moduleType)
    }
    @inline(__always)
    set {
      self.__moduleType = std.string(newValue)
    }
  }
  
  var batteryLevel: Double? {
    @inline(__always)
    get {
      return self.__batteryLevel.value
    }
    @inline(__always)
    set {
      self.__batteryLevel = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var isConnected: Bool {
    @inline(__always)
    get {
      return self.__isConnected
    }
    @inline(__always)
    set {
      self.__isConnected = newValue
    }
  }
}
