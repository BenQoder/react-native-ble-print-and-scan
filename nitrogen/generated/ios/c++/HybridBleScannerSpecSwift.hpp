///
/// HybridBleScannerSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridBleScannerSpec.hpp"

// Forward declaration of `HybridBleScannerSpec_cxx` to properly resolve imports.
namespace BlePrintAndScan { class HybridBleScannerSpec_cxx; }

// Forward declaration of `Device` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct Device; }
// Forward declaration of `ScanResult` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct ScanResult; }
// Forward declaration of `ScannerTrigger` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class ScannerTrigger; }
// Forward declaration of `ScannerMode` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class ScannerMode; }
// Forward declaration of `BeepSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct BeepSettings; }
// Forward declaration of `BeepVolume` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class BeepVolume; }
// Forward declaration of `BeepTone` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class BeepTone; }
// Forward declaration of `PowerSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct PowerSettings; }
// Forward declaration of `DataFormatSettings` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct DataFormatSettings; }
// Forward declaration of `TimestampFormat` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { enum class TimestampFormat; }

#include <NitroModules/Promise.hpp>
#include "Device.hpp"
#include <vector>
#include <functional>
#include <string>
#include "ScanResult.hpp"
#include "ScannerTrigger.hpp"
#include "ScannerMode.hpp"
#include "BeepSettings.hpp"
#include "BeepVolume.hpp"
#include "BeepTone.hpp"
#include <optional>
#include "PowerSettings.hpp"
#include "DataFormatSettings.hpp"
#include "TimestampFormat.hpp"

#include "BlePrintAndScan-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::bleprintandscan {

  /**
   * The C++ part of HybridBleScannerSpec_cxx.swift.
   *
   * HybridBleScannerSpecSwift (C++) accesses HybridBleScannerSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridBleScannerSpec_cxx can directly inherit from the C++ class HybridBleScannerSpec
   * to simplify the whole structure and memory management.
   */
  class HybridBleScannerSpecSwift: public virtual HybridBleScannerSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridBleScannerSpecSwift(const BlePrintAndScan::HybridBleScannerSpec_cxx& swiftPart):
      HybridObject(HybridBleScannerSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline BlePrintAndScan::HybridBleScannerSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline void dispose() override {
      auto __result = _swiftPart.dispose();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::shared_ptr<Promise<void>> initializeScanner() override {
      auto __result = _swiftPart.initializeScanner();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> startScanningForScanners(const std::function<void(const std::vector<Device>& /* devices */)>& onScannerFound) override {
      auto __result = _swiftPart.startScanningForScanners(onScannerFound);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> suspendScanForScanners() override {
      auto __result = _swiftPart.suspendScanForScanners();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> connectToScanner(const std::string& deviceId) override {
      auto __result = _swiftPart.connectToScanner(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> disconnectFromScanner(const std::string& deviceId) override {
      auto __result = _swiftPart.disconnectFromScanner(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> isScannerConnected(const std::string& deviceId) override {
      auto __result = _swiftPart.isScannerConnected(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::vector<Device>>> getConnectedScanners() override {
      auto __result = _swiftPart.getConnectedScanners();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> disconnectAllScanners() override {
      auto __result = _swiftPart.disconnectAllScanners();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> startListening(const std::string& deviceId, const std::function<void(const ScanResult& /* result */)>& onScanResult) override {
      auto __result = _swiftPart.startListening(deviceId, onScanResult);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> stopListening(const std::string& deviceId) override {
      auto __result = _swiftPart.stopListening(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> triggerScan(const std::string& deviceId, ScannerTrigger duration) override {
      auto __result = _swiftPart.triggerScan(deviceId, static_cast<int>(duration));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> setScannerMode(const std::string& deviceId, ScannerMode mode) override {
      auto __result = _swiftPart.setScannerMode(deviceId, static_cast<int>(mode));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> setBeepSettings(const std::string& deviceId, const BeepSettings& settings) override {
      auto __result = _swiftPart.setBeepSettings(deviceId, settings);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> setPowerSettings(const std::string& deviceId, const PowerSettings& settings) override {
      auto __result = _swiftPart.setPowerSettings(deviceId, settings);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> setDataFormatSettings(const std::string& deviceId, const DataFormatSettings& settings) override {
      auto __result = _swiftPart.setDataFormatSettings(deviceId, settings);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> setTimestamp(const std::string& deviceId, TimestampFormat format, const std::optional<std::string>& datetime) override {
      auto __result = _swiftPart.setTimestamp(deviceId, static_cast<int>(format), datetime);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> restoreFactorySettings(const std::string& deviceId) override {
      auto __result = _swiftPart.restoreFactorySettings(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> customBeep(const std::string& deviceId, double level) override {
      auto __result = _swiftPart.customBeep(deviceId, std::forward<decltype(level)>(level));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> customBeepTime(const std::string& deviceId, double timeMs, double type, double frequencyHz) override {
      auto __result = _swiftPart.customBeepTime(deviceId, std::forward<decltype(timeMs)>(timeMs), std::forward<decltype(type)>(type), std::forward<decltype(frequencyHz)>(frequencyHz));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> powerOff(const std::string& deviceId) override {
      auto __result = _swiftPart.powerOff(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<double>> getStoredDataCount(const std::string& deviceId) override {
      auto __result = _swiftPart.getStoredDataCount(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::vector<ScanResult>>> uploadStoredData(const std::string& deviceId, bool clearAfterUpload) override {
      auto __result = _swiftPart.uploadStoredData(deviceId, std::forward<decltype(clearAfterUpload)>(clearAfterUpload));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> clearStoredData(const std::string& deviceId) override {
      auto __result = _swiftPart.clearStoredData(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> sendRawCommand(const std::string& deviceId, const std::string& command) override {
      auto __result = _swiftPart.sendRawCommand(deviceId, command);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    BlePrintAndScan::HybridBleScannerSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::bleprintandscan
