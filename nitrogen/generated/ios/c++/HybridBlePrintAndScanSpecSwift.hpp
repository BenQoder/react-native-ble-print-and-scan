///
/// HybridBlePrintAndScanSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridBlePrintAndScanSpec.hpp"

// Forward declaration of `HybridBlePrintAndScanSpec_cxx` to properly resolve imports.
namespace BlePrintAndScan { class HybridBlePrintAndScanSpec_cxx; }

// Forward declaration of `Device` to properly resolve imports.
namespace margelo::nitro::bleprintandscan { struct Device; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }

#include <NitroModules/Promise.hpp>
#include "Device.hpp"
#include <vector>
#include <functional>
#include <string>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>

#include "BlePrintAndScan-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::bleprintandscan {

  /**
   * The C++ part of HybridBlePrintAndScanSpec_cxx.swift.
   *
   * HybridBlePrintAndScanSpecSwift (C++) accesses HybridBlePrintAndScanSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridBlePrintAndScanSpec_cxx can directly inherit from the C++ class HybridBlePrintAndScanSpec
   * to simplify the whole structure and memory management.
   */
  class HybridBlePrintAndScanSpecSwift: public virtual HybridBlePrintAndScanSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridBlePrintAndScanSpecSwift(const BlePrintAndScan::HybridBlePrintAndScanSpec_cxx& swiftPart):
      HybridObject(HybridBlePrintAndScanSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline BlePrintAndScan::HybridBlePrintAndScanSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline double sum(double num1, double num2) override {
      auto __result = _swiftPart.sum(std::forward<decltype(num1)>(num1), std::forward<decltype(num2)>(num2));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> initializeBluetooth() override {
      auto __result = _swiftPart.initializeBluetooth();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> startScanningForBluetoothDevices(const std::function<void(const std::vector<Device>& /* devices */)>& onDeviceFound) override {
      auto __result = _swiftPart.startScanningForBluetoothDevices(onDeviceFound);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> suspendScanForBluetoothDevices() override {
      auto __result = _swiftPart.suspendScanForBluetoothDevices();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> connectToBluetoothDevice(const std::string& deviceId) override {
      auto __result = _swiftPart.connectToBluetoothDevice(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> disconnectFromBluetoothDevice(const std::string& deviceId) override {
      auto __result = _swiftPart.disconnectFromBluetoothDevice(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> isDeviceConnected(const std::string& deviceId) override {
      auto __result = _swiftPart.isDeviceConnected(deviceId);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::vector<Device>>> getConnectedDevices() override {
      auto __result = _swiftPart.getConnectedDevices();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> disconnectAllDevices() override {
      auto __result = _swiftPart.disconnectAllDevices();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::vector<std::shared_ptr<ArrayBuffer>>>> generateBytecode(const std::string& value, double printerWidth, double mtuSize) override {
      auto __result = _swiftPart.generateBytecode(value, std::forward<decltype(printerWidth)>(printerWidth), std::forward<decltype(mtuSize)>(mtuSize));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::vector<std::string>>> generateBytecodeBase64(const std::string& value, double printerWidth, double mtuSize) override {
      auto __result = _swiftPart.generateBytecodeBase64(value, std::forward<decltype(printerWidth)>(printerWidth), std::forward<decltype(mtuSize)>(mtuSize));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> sendToBluetoothThermalPrinter(const std::string& deviceId, const std::string& value, double printerWidth) override {
      auto __result = _swiftPart.sendToBluetoothThermalPrinter(deviceId, value, std::forward<decltype(printerWidth)>(printerWidth));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> sendToUsbThermalPrinter(const std::string& value, double printerWidth, double chunkSize) override {
      auto __result = _swiftPart.sendToUsbThermalPrinter(value, std::forward<decltype(printerWidth)>(printerWidth), std::forward<decltype(chunkSize)>(chunkSize));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    BlePrintAndScan::HybridBlePrintAndScanSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::bleprintandscan
